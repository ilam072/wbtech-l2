// Code generated by MockGen. DO NOT EDIT.
// Source: event.go
//
// Generated by this command:
//
//	mockgen -source=event.go -destination=../mocks/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ilam072/wbtech-l2/18-calendar/internal/event/types/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
	isgomock struct{}
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventRepo) CreateEvent(ctx context.Context, event domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepoMockRecorder) CreateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepo)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockEventRepo) DeleteEvent(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepoMockRecorder) DeleteEvent(ctx, eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepo)(nil).DeleteEvent), ctx, eventID, userID)
}

// GetEventsForDay mocks base method.
func (m *MockEventRepo) GetEventsForDay(ctx context.Context, userID int, date time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForDay", ctx, userID, date)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForDay indicates an expected call of GetEventsForDay.
func (mr *MockEventRepoMockRecorder) GetEventsForDay(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForDay", reflect.TypeOf((*MockEventRepo)(nil).GetEventsForDay), ctx, userID, date)
}

// GetEventsForMonth mocks base method.
func (m *MockEventRepo) GetEventsForMonth(ctx context.Context, userID int, start time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForMonth", ctx, userID, start)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForMonth indicates an expected call of GetEventsForMonth.
func (mr *MockEventRepoMockRecorder) GetEventsForMonth(ctx, userID, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForMonth", reflect.TypeOf((*MockEventRepo)(nil).GetEventsForMonth), ctx, userID, start)
}

// GetEventsForWeek mocks base method.
func (m *MockEventRepo) GetEventsForWeek(ctx context.Context, userID int, start time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForWeek", ctx, userID, start)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForWeek indicates an expected call of GetEventsForWeek.
func (mr *MockEventRepoMockRecorder) GetEventsForWeek(ctx, userID, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForWeek", reflect.TypeOf((*MockEventRepo)(nil).GetEventsForWeek), ctx, userID, start)
}

// UpdateEvent mocks base method.
func (m *MockEventRepo) UpdateEvent(ctx context.Context, event domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepoMockRecorder) UpdateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepo)(nil).UpdateEvent), ctx, event)
}
