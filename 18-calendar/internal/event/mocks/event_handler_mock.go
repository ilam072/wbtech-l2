// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=../../event/mocks/event_handler_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/ilam072/wbtech-l2/18-calendar/internal/event/types/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEvent) CreateEvent(ctx context.Context, event dto.CreateEventRequest, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventMockRecorder) CreateEvent(ctx, event, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEvent)(nil).CreateEvent), ctx, event, userID)
}

// DeleteEvent mocks base method.
func (m *MockEvent) DeleteEvent(ctx context.Context, eventID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, eventID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventMockRecorder) DeleteEvent(ctx, eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEvent)(nil).DeleteEvent), ctx, eventID, userID)
}

// GetEventsForDay mocks base method.
func (m *MockEvent) GetEventsForDay(ctx context.Context, userID int, date time.Time) (dto.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForDay", ctx, userID, date)
	ret0, _ := ret[0].(dto.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForDay indicates an expected call of GetEventsForDay.
func (mr *MockEventMockRecorder) GetEventsForDay(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForDay", reflect.TypeOf((*MockEvent)(nil).GetEventsForDay), ctx, userID, date)
}

// GetEventsForMonth mocks base method.
func (m *MockEvent) GetEventsForMonth(ctx context.Context, userID int, start time.Time) (dto.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForMonth", ctx, userID, start)
	ret0, _ := ret[0].(dto.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForMonth indicates an expected call of GetEventsForMonth.
func (mr *MockEventMockRecorder) GetEventsForMonth(ctx, userID, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForMonth", reflect.TypeOf((*MockEvent)(nil).GetEventsForMonth), ctx, userID, start)
}

// GetEventsForWeek mocks base method.
func (m *MockEvent) GetEventsForWeek(ctx context.Context, userID int, start time.Time) (dto.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsForWeek", ctx, userID, start)
	ret0, _ := ret[0].(dto.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsForWeek indicates an expected call of GetEventsForWeek.
func (mr *MockEventMockRecorder) GetEventsForWeek(ctx, userID, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsForWeek", reflect.TypeOf((*MockEvent)(nil).GetEventsForWeek), ctx, userID, start)
}

// UpdateEvent mocks base method.
func (m *MockEvent) UpdateEvent(ctx context.Context, event dto.UpdateEventRequest, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventMockRecorder) UpdateEvent(ctx, event, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEvent)(nil).UpdateEvent), ctx, event, userID)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// FormatValidationErrors mocks base method.
func (m *MockValidator) FormatValidationErrors(err error) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatValidationErrors", err)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// FormatValidationErrors indicates an expected call of FormatValidationErrors.
func (mr *MockValidatorMockRecorder) FormatValidationErrors(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatValidationErrors", reflect.TypeOf((*MockValidator)(nil).FormatValidationErrors), err)
}

// Validate mocks base method.
func (m *MockValidator) Validate(i any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), i)
}
